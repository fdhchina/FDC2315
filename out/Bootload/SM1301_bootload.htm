<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\out\Bootload\SM1301_bootload.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\out\Bootload\SM1301_bootload.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Wed Oct 14 11:49:26 2015
<BR><P>
<H3>Maximum Stack Usage =        196 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; UpdateFirmware &rArr; ReadFile &rArr; ReadSector &rArr; CH375FileReadX &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[92]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SystemInit_ExtMemCtl</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[dc]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[dd]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[4f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[53]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[df]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[58]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[f4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[f6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[f8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[4d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[f9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[50]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[52]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[fa]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[54]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; UpdateFirmware &rArr; ReadFile &rArr; ReadSector &rArr; CH375FileReadX &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[fb]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[93]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[57]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[fc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[59]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ca]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_load_app
</UL>

<P><STRONG><a name="[49]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[95]"></a>CH375GetVer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, CH375MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375LibInit
</UL>

<P><STRONG><a name="[77]"></a>CH375s01</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, CH375MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s08
</UL>

<P><STRONG><a name="[5b]"></a>CH375s17</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375s17 &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s42
</UL>

<P><STRONG><a name="[5e]"></a>CH375s18</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375s18 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
</UL>

<P><STRONG><a name="[61]"></a>CH375DirtyBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, CH375MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s08
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s42
</UL>

<P><STRONG><a name="[60]"></a>CH375s42</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH375s42 &rArr; CH375s17 &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DirtyBuffer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s17
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s25
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
</UL>

<P><STRONG><a name="[62]"></a>CH375s49</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CH375s49 &rArr; xDelay100uS
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDelay100uS
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskReady
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s25
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Reset
</UL>

<P><STRONG><a name="[64]"></a>CH375s40</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CH375s40 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskConnect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
</UL>

<P><STRONG><a name="[65]"></a>CH375DiskConnect</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375DiskConnect &rArr; CH375s40 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s40
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskReady
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUDisk
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s05
</UL>

<P><STRONG><a name="[66]"></a>CH375s05</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH375s05 &rArr; CH375DiskConnect &rArr; CH375s40 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileClose
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileErase
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s08
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
</UL>

<P><STRONG><a name="[67]"></a>CH375Reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375Reset &rArr; CH375s49 &rArr; xDelay100uS
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s49
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Init
</UL>

<P><STRONG><a name="[68]"></a>CH375s43</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375s43 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Init
</UL>

<P><STRONG><a name="[69]"></a>CH375Init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH375Init &rArr; CH375s43 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s43
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Reset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s49
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375LibInit
</UL>

<P><STRONG><a name="[6a]"></a>CH375s13</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375s13 &rArr; CH375s40 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDelay100uS
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s40
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskReady
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
</UL>

<P><STRONG><a name="[6c]"></a>CH375s44</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CH375s44 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskReady
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s25
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
</UL>

<P><STRONG><a name="[6d]"></a>CH375s41</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH375s41 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s25
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
</UL>

<P><STRONG><a name="[6e]"></a>CH375s23</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CH375s23 &rArr; CH375s05 &rArr; CH375DiskConnect &rArr; CH375s40 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskConnect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s41
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s44
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s05
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s40
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s42
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskReady
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s08
</UL>

<P><STRONG><a name="[72]"></a>CH375s24</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, CH375MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
</UL>

<P><STRONG><a name="[70]"></a>CH375s47</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s41
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s44
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s40
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s45
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
</UL>

<P><STRONG><a name="[71]"></a>CH375s06</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CH375s06 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s24
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DirtyBuffer
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s17
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileModify
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s20
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileErase
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s15
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s12
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s08
</UL>

<P><STRONG><a name="[73]"></a>CH375s07</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDelayAfterWrite
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s24
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DirtyBuffer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s18
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileModify
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s20
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileErase
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s15
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s12
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s09
</UL>

<P><STRONG><a name="[75]"></a>CH375s25</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH375s25 &rArr; CH375s42 &rArr; CH375s17 &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s41
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s44
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s49
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s42
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskReady
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s08
</UL>

<P><STRONG><a name="[76]"></a>CH375s08</STRONG> (Thumb, 740 bytes, Stack size 24 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CH375s08 &rArr; CH375s23 &rArr; CH375s05 &rArr; CH375DiskConnect &rArr; CH375s40 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s25
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s05
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DirtyBuffer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s01
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s02
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
</UL>

<P><STRONG><a name="[79]"></a>CH375s09</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileWriteX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s20
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileErase
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
</UL>

<P><STRONG><a name="[7a]"></a>CH375s10</STRONG> (Thumb, 694 bytes, Stack size 32 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s09
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileWriteX
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileReadX
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s19
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileErase
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s48
</UL>

<P><STRONG><a name="[7b]"></a>CH375s48</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, CH375MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s20
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s11
</UL>

<P><STRONG><a name="[7c]"></a>CH375s11</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, CH375MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s48
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileWriteX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
</UL>

<P><STRONG><a name="[7d]"></a>CH375s12</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, CH375MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileWriteX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileErase
</UL>

<P><STRONG><a name="[7e]"></a>CH375FileOpen</STRONG> (Thumb, 1358 bytes, Stack size 48 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = CH375FileOpen &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xFileNameEnumer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s08
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s05
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileErase
</UL>

<P><STRONG><a name="[80]"></a>CH375s15</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CH375s15 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileWriteX
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileClose
</UL>

<P><STRONG><a name="[81]"></a>CH375FileClose</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CH375FileClose &rArr; CH375s15 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s15
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s05
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
</UL>

<P><STRONG><a name="[82]"></a>CH375FileErase</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, CH375MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s12
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s09
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s05
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
</UL>

<P><STRONG><a name="[84]"></a>CH375s14</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, CH375MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileWriteX
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileReadX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileCreate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s19
</UL>

<P><STRONG><a name="[83]"></a>CH375FileCreate</STRONG> (Thumb, 834 bytes, Stack size 64 bytes, CH375MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s14
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileErase
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s12
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s11
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s09
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s05
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DirtyBuffer
</UL>

<P><STRONG><a name="[85]"></a>CH375FileModify</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, CH375MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
</UL>

<P><STRONG><a name="[86]"></a>CH375DiskReady</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CH375DiskReady &rArr; CH375s23 &rArr; CH375s05 &rArr; CH375DiskConnect &rArr; CH375s40 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskConnect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s25
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s23
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s44
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s49
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUDisk
</UL>

<P><STRONG><a name="[87]"></a>CH375s19</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, CH375MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s14
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileLocate
</UL>

<P><STRONG><a name="[88]"></a>CH375s20</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, CH375MAI.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s48
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s09
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileWriteX
</UL>

<P><STRONG><a name="[89]"></a>CH375ReadBlock</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, CH375SEC.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CH375ReadBlock &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteToExtBuf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s28
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s24
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s17
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileReadX
</UL>

<P><STRONG><a name="[8c]"></a>CH375WriteBlock</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, CH375SEC.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadFromExtBuf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDelayAfterWrite
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s28
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s24
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s18
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileWriteX
</UL>

<P><STRONG><a name="[8e]"></a>CH375FileLocate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, CH375SEC.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s19
</UL>

<P><STRONG><a name="[8f]"></a>CH375FileReadX</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, CH375SEC.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CH375FileReadX &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s14
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSector
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>

<P><STRONG><a name="[90]"></a>CH375FileWriteX</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, CH375SEC.O(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s20
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s14
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s15
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s12
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s11
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s10
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s09
</UL>

<P><STRONG><a name="[b2]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
</UL>

<P><STRONG><a name="[fd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[56]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[100]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[101]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[102]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>CH375LibInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ch375.o(i.CH375LibInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CH375LibInit &rArr; CH375Init &rArr; CH375s43 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375GetVer
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUDisk
</UL>

<P><STRONG><a name="[96]"></a>CH375_Configuration</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ch375.o(i.CH375_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH375_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[99]"></a>ChipHalInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal.o(i.ChipHalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ChipHalInit &rArr; RCC_Configuration &rArr; SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Configuration
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>ChipOutHalInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal.o(i.ChipOutHalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ChipOutHalInit &rArr; kb_Init &rArr; Key_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>CloseFile</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ch375.o(i.CloseFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CloseFile &rArr; CH375FileClose &rArr; CH375s15 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileClose
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFirmware
</UL>

<P><STRONG><a name="[a2]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c2]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFirmware
</UL>

<P><STRONG><a name="[a1]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFirmware
</UL>

<P><STRONG><a name="[c1]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFirmware
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[98]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Configuration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_Configuration
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_SET_DATA
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_GET_DATA
</UL>

<P><STRONG><a name="[cd]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_in
</UL>

<P><STRONG><a name="[ce]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_out_all
</UL>

<P><STRONG><a name="[cf]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_out_no
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_Write))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_SET_DATA
</UL>

<P><STRONG><a name="[cc]"></a>GetKeyPressed</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usrkey.o(i.GetKeyPressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_GetKey
</UL>

<P><STRONG><a name="[a4]"></a>Init375</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ch375.o(i.Init375))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init375 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUDisk
</UL>

<P><STRONG><a name="[a6]"></a>InitUDisk</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ch375.o(i.InitUDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InitUDisk &rArr; CH375DiskReady &rArr; CH375s23 &rArr; CH375s05 &rArr; CH375DiskConnect &rArr; CH375s40 &rArr; xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskReady
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskConnect
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init375
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375LibInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>Key_Configuration</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, key.o(i.Key_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_Init
</UL>

<P><STRONG><a name="[a8]"></a>LCM_GET_DATA</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcm19264.o(i.LCM_GET_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcom
</UL>

<P><STRONG><a name="[aa]"></a>LCM_SET_DATA</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcm19264.o(i.LCM_SET_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCM_SET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrdat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrcmd
</UL>

<P><STRONG><a name="[ad]"></a>LcdSelectL</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcm19264.o(i.LcdSelectL))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locatexy
</UL>

<P><STRONG><a name="[ae]"></a>LcdSelectM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcm19264.o(i.LcdSelectM))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdM
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locatexy
</UL>

<P><STRONG><a name="[af]"></a>LcdSelectR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcm19264.o(i.LcdSelectR))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locatexy
</UL>

<P><STRONG><a name="[ac]"></a>Locatexy</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcm19264.o(i.Locatexy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Locatexy &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrcmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelectR
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelectM
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelectL
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putedot
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putcdot
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Clr
</UL>

<P><STRONG><a name="[d7]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>OpenFile</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ch375.o(i.OpenFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = OpenFile &rArr; CH375FileOpen &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>PollingKey</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, key.o(i.PollingKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PollingKey &rArr; key_out_no
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_out_no
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_out_all
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_in
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyscan_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_GetKey
</UL>

<P><STRONG><a name="[97]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Configuration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>RCC_Configuration</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rcc.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_Configuration &rArr; SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[b9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bb]"></a>ReadBuffer</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, ch375.o(i.ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>

<P><STRONG><a name="[ba]"></a>ReadFile</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ch375.o(i.ReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ReadFile &rArr; ReadSector &rArr; CH375FileReadX &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileReadX
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSector
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFirmware
</UL>

<P><STRONG><a name="[bc]"></a>ReadSector</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ch375.o(i.ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ReadSector &rArr; CH375FileReadX &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileReadX
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
</UL>

<P><STRONG><a name="[a5]"></a>SysTickDelay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rcc.o(i.SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init375
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUDisk
</UL>

<P><STRONG><a name="[b8]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[c0]"></a>UpdateFirmware</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, main.o(i.UpdateFirmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = UpdateFirmware &rArr; ReadFile &rArr; ReadSector &rArr; CH375FileReadX &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFile
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>Wrcmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcm19264.o(i.Wrcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcom
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcmDelay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_SET_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locatexy
</UL>

<P><STRONG><a name="[c5]"></a>WrcmdL</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcm19264.o(i.WrcmdL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WrcmdL &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrcmd
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelectL
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_DisplayOpen
</UL>

<P><STRONG><a name="[c6]"></a>WrcmdM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcm19264.o(i.WrcmdM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WrcmdM &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrcmd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelectM
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_DisplayOpen
</UL>

<P><STRONG><a name="[c7]"></a>WrcmdR</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcm19264.o(i.WrcmdR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WrcmdR &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrcmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdSelectR
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_DisplayOpen
</UL>

<P><STRONG><a name="[c8]"></a>Wrdat</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lcm19264.o(i.Wrdat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Wrdat &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcom
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcmDelay
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_SET_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putedot
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putcdot
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Clr
</UL>

<P><STRONG><a name="[db]"></a>delay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ch375.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>

<P><STRONG><a name="[bf]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rcc.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rcc.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xDelay100uS
</UL>

<P><STRONG><a name="[c9]"></a>iap_load_app</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.iap_load_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iap_load_app
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>kb_GetKey</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, usrkey.o(i.kb_GetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kb_GetKey &rArr; PollingKey &rArr; key_out_no
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingKey
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyPressed
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>kb_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usrkey.o(i.kb_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = kb_Init &rArr; Key_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipOutHalInit
</UL>

<P><STRONG><a name="[b6]"></a>key_in</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, key.o(i.key_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_in
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingKey
</UL>

<P><STRONG><a name="[b7]"></a>key_out_all</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, key.o(i.key_out_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_out_all
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingKey
</UL>

<P><STRONG><a name="[b4]"></a>key_out_no</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, key.o(i.key_out_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_out_no
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingKey
</UL>

<P><STRONG><a name="[c4]"></a>lcmDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcm19264.o(i.lcmDelay))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcom
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrdat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrcmd
</UL>

<P><STRONG><a name="[d8]"></a>lcm_BackLightCtrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcm19264.o(i.lcm_BackLightCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>lcm_Clr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lcm19264.o(i.lcm_Clr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcm_Clr &rArr; Locatexy &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrdat
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locatexy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>lcm_Configuration</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lcm19264.o(i.lcm_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcm_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>

<P><STRONG><a name="[d1]"></a>lcm_DisplayOpen</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcm19264.o(i.lcm_DisplayOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcm_DisplayOpen &rArr; WrcmdR &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdL
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>lcm_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcm19264.o(i.lcm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lcm_Init &rArr; lcm_Clr &rArr; Locatexy &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_dat_in
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdR
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WrcmdL
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_DisplayOpen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>lcm_Putcdot</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, lcm19264.o(i.lcm_Putcdot))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcm_Putcdot &rArr; Locatexy &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrdat
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locatexy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putstr
</UL>

<P><STRONG><a name="[d5]"></a>lcm_Putedot</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, lcm19264.o(i.lcm_Putedot))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcm_Putedot &rArr; Locatexy &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrdat
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Locatexy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putstr
</UL>

<P><STRONG><a name="[d6]"></a>lcm_Putstr</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lcm19264.o(i.lcm_Putstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcm_Putstr &rArr; lcm_Putedot &rArr; Locatexy &rArr; Wrcmd &rArr; wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putedot
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putcdot
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>lcm_dat_in</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcm19264.o(i.lcm_dat_in))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcom
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Init
</UL>

<P><STRONG><a name="[d9]"></a>lcm_dat_out</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcm19264.o(i.lcm_dat_out))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtcom
</UL>

<P><STRONG><a name="[55]"></a>main</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = main &rArr; UpdateFirmware &rArr; ReadFile &rArr; ReadSector &rArr; CH375FileReadX &rArr; CH375s10 &rArr; CH375s09 &rArr; CH375s07 &rArr; CH375s47 &rArr; CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Putstr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_DisplayOpen
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_Clr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_BackLightCtrl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_GetKey
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenFile
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUDisk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseFile
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_load_app
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFirmware
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipOutHalInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipHalInit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c3]"></a>wtcom</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcm19264.o(i.wtcom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wtcom &rArr; LCM_GET_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_dat_out
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcm_dat_in
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcmDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCM_GET_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrdat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wrcmd
</UL>

<P><STRONG><a name="[63]"></a>xDelay100uS</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ch375.o(i.xDelay100uS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xDelay100uS
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s49
</UL>

<P><STRONG><a name="[74]"></a>xDelayAfterWrite</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ch375.o(i.xDelayAfterWrite))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
</UL>

<P><STRONG><a name="[7f]"></a>xFileNameEnumer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ch375.o(i.xFileNameEnumer))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
</UL>

<P><STRONG><a name="[6b]"></a>xQueryInterrupt</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, ch375.o(i.xQueryInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xReadCH375Data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s44
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s45
</UL>

<P><STRONG><a name="[5d]"></a>xReadCH375Data</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ch375.o(i.xReadCH375Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xReadCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskConnect
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init375
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Reset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s40
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s17
</UL>

<P><STRONG><a name="[8d]"></a>xReadFromExtBuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ch375.o(i.xReadFromExtBuf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
</UL>

<P><STRONG><a name="[5c]"></a>xWriteCH375Cmd</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ch375.o(i.xWriteCH375Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375FileOpen
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375DiskConnect
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init375
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s41
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s44
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s13
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s43
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375Reset
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s40
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s18
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s17
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s45
</UL>

<P><STRONG><a name="[5f]"></a>xWriteCH375Data</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ch375.o(i.xWriteCH375Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xWriteCH375Data
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init375
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s07
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s06
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s41
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s43
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s40
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s18
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s45
</UL>

<P><STRONG><a name="[8a]"></a>xWriteToExtBuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ch375.o(i.xWriteToExtBuf))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b5]"></a>keyscan_delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, key.o(i.keyscan_delay))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PollingKey
</UL>

<P><STRONG><a name="[bd]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[be]"></a>SetSysClockTo72</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[a3]"></a>delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_flash.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[78]"></a>CH375s02</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, CH375MAI.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s08
</UL>

<P><STRONG><a name="[6f]"></a>CH375s45</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, CH375MAI.O(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CH375s45 &rArr; xQueryInterrupt &rArr; xWriteCH375Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH375Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueryInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375s47
</UL>

<P><STRONG><a name="[8b]"></a>CH375s28</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, CH375SEC.O(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375WriteBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH375ReadBlock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
